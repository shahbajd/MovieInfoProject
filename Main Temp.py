from Tkinter import *from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom BeautifulSoup import BeautifulSoupimport osimport requestsfrom openpyxl import load_workbookclass Start:    def __init__(self):        root.minsize(width=350, height=150)        root.maxsize(width=350, height=150)        root.configure(background='#ECECEC')        root.title('Movie Info Retreival Project') # Title of Tkinter Window        main_frame = Frame() # Create a Master Frame        main_frame.pack()        main_frame.configure(background='#ECECEC') # Apple Grey background                self.heading_message = Label(main_frame, text='Enter Movie Title', background='#ECECEC')        self.heading_message.pack(padx=0, pady=15)                self.query_label = Label(main_frame, text='Title:', padx=0, pady=0, background='#ECECEC')        self.query_label.pack(padx=10, pady=10, side=LEFT)                self.query_entry = Entry(main_frame)        self.query_entry.pack(padx=0, pady=10, side=LEFT)        self.query_entry.focus()                self.launch = Button(main_frame, text="SEARCH")        self.launch.bind('<Button-1>', self.SEARCH)        self.launch.pack(pady=5, padx=5, side=LEFT)                root.bind('<Return>', self.SEARCH) # Return Key calls "SEARCH" function        def SEARCH(self, event):        self.query = self.query_entry.get() # Store data entered into "query_entry" into "self.query"        if self.query == '': # If nothing entered            self.heading_message.config(text='Invalid Entry! Try Again')        else:            self.Rating()                def Rating(self):            self.heading_message.config(text='Enter Rating between 0 to 10')            self.query_label.config(text='Rating:')            self.launch.config(text='OK')            self.query_entry.delete(0, 'end')            self.launch.bind('<Button-1>', self.Rating_Check)            root.bind('<Return>', self.Rating_Check)                def Rating_Check(self, event):        self.rating = self.query_entry.get()        try:            self.rating = float(self.rating)        except ValueError:            self.Rating()        if self.rating > 10.0 or self.rating < 0.0:            self.Rating()        else:            self.destroy_window()                def destroy_window(self):        root.destroy()                class Duplicate_Entry:    def __init__(self):        root.minsize(width=350, height=150)        root.maxsize(width=350, height=150)        root.configure(background='#ECECEC')        root.title('Movie Info Retreival Project') # Title of Tkinter Window        main_frame = Frame() # Create a Master Frame        main_frame.pack()        main_frame.configure(background='#ECECEC') # Apple Grey background                self.heading_message = Label(main_frame, text='Duplicate Entry!', background='yellow')        self.heading_message.pack(padx=5, pady=15)                self.launch = Button(main_frame, text="OK")        self.launch.bind('<Button-1>', self.OK)        self.launch.pack(pady=5, padx=5)                root.bind('<Return>', self.OK) # Return Key calls "SEARCH" function        def OK(self, event):         root.destroy()class Confirm_Info:    def __init__(self, movie_info):        # root.minsize(width=350, height=150)        # root.maxsize(width=350, height=150)        root.configure(background='#ECECEC')        root.title('Movie Info Retreival Project') # Title of Tkinter Window        main_frame = Frame() # Create a Master Frame        main_frame.pack()        main_frame.configure(background='#ECECEC') # Apple Grey background                self.heading_message = Label(main_frame, text='Confirm Title Info', background='#ECECEC')        self.heading_message.pack(padx=5, pady=15)                self.title = Label(main_frame, text=movie_info['title'], padx=0, pady=0, background='#ECECEC')        self.title.pack(padx=10, pady=2)                self.director = Label(main_frame, text=movie_info['director'], padx=0, pady=0, background='#ECECEC')        self.director.pack(padx=10, pady=2)                self.year = Label(main_frame, text=str(movie_info['year']), padx=0, pady=0, background='#ECECEC')        self.year.pack(padx=10, pady=2)                self.quit = Button(main_frame, text="QUIT", command=self.Quit)        self.quit.pack(pady=5, padx=5, side=LEFT)                self.retry = Button(main_frame, text="RETRY", command=self.Retry)        self.retry.pack(pady=5, padx=5, side=LEFT)                self.confirm = Button(main_frame, text="CONFIRM")        self.confirm.bind('<Button-1>', self.Confirm)        self.confirm.pack(pady=5, padx=5, side=LEFT)        root.bind('<Return>', self.Confirm)        def Confirm(self, event):        self.reply = 'True'        root.destroy()        def Retry(self):        self.reply = 'Retry'        root.destroy()        def Quit(self):        self.reply = False        root.destroy()        class Complete:    def __init__(self):        root.minsize(width=350, height=150)        root.maxsize(width=350, height=150)        root.configure(background='#ECECEC')        root.title('Movie Info Retreival Project') # Title of Tkinter Window        main_frame = Frame() # Create a Master Frame        main_frame.pack()        main_frame.configure(background='#ECECEC') # Apple Grey background                self.heading_message = Label(main_frame, text='Retreival Complete!', background='green')        self.heading_message.pack(padx=5, pady=15)                self.another = Label(main_frame, text='Search Another Title?', padx=0, pady=0, background='#ECECEC')        self.another.pack(padx=10, pady=10)                self.quit = Button(main_frame, text="QUIT", command=self.Quit)        self.quit.pack(pady=5, padx=5, side=LEFT)                self.yes = Button(main_frame, text="YES")        self.yes.bind('<Button-1>', self.Another)        self.yes.pack(pady=5, padx=5)        root.bind('<Return>', self.Another)        def Another(self, event):        self.another = True        root.destroy()        def Quit(self):        self.another = False        root.destroy()    def run_browser(query, rating):    dictionary = {} # Empty dictionary for all movie information        #SELENIUM    driver = webdriver.Chrome('/Users/Shahbaj/Komodo10/Selenium Drivers/chromedriver') # Open browser with reference to driver location    driver.get('http://www.imdb.com') # Enter URL    assert "IMDb" in driver.title # Confirmation of desired site    elem = driver.find_element_by_name("q") # Find search query textbox    elem.clear() # Clear contents of textbox    elem.send_keys(query) # enter search query    elem.send_keys(Keys.RETURN) # Keyboard "Enter" input    assert "No results found" not in driver.page_source # Confirmation "No results found" is NOT displayed    driver.find_element_by_xpath("//td[@class='result_text']/a[1]").click() # Find first result in list and click on it        #BEAUTIFUL SOUP    r = requests.get(driver.current_url) # Get URL of current page    web_info = BeautifulSoup(r.content) # Convert all webpage content        title_line = web_info.find('h1', itemprop='name') # Find movie title location    title=title_line.contents[0] # First content of "title_line"    title = title.replace('&nbsp;', '') # Remove "&nbsp;" from the ending     dictionary['title'] = title # Add title to dictionary under "title" key    print title.encode('utf-8')    #ORIGINAL TITLE RETREIVED        director_line=web_info.find('span', itemprop='name') # Find movie director location    director = director_line.string # Extract the string from "director_line"    dictionary['director'] = director # Add director to dictionary under "director" key    print director        year_block=web_info.find('span', id='titleYear') # Find movie year location    year_line=year_block.find('a')    year=year_line.string # Extract the string from "year_line"    dictionary['year'] = int(year) # Ensure "year" is an integer for proper excel input    print year    driver.close() # Close browser    dictionary['rating'] = rating # Rating should be decimal        return dictionary    def Excel_Write(movie_info):    title_col = 2    year_col = 3    rating_col = 4    director_col = 5    row_count = 3        os.chdir('/Users/Shahbaj/')    wb = load_workbook('Movie List.xlsx')    sheet_list = wb.get_sheet_names()    active_sheet=wb.get_sheet_by_name(sheet_list[0])        while(active_sheet.cell(row=row_count, column=title_col).value != None):        if (active_sheet.cell(row=row_count, column=title_col).value == movie_info['title']):            return True        row_count+=1        active_sheet.cell(row=row_count, column=title_col).value = movie_info['title']    active_sheet.cell(row=row_count, column=year_col).value = movie_info['year']    active_sheet.cell(row=row_count, column=rating_col).number_format = '0.0'    active_sheet.cell(row=row_count, column=rating_col).value = movie_info['rating']    active_sheet.cell(row=row_count, column=director_col).value = movie_info['director']        wb.save('Movie List.xlsx')    return Falsewhile(True):    root = Tk()    os.system('''/usr/bin/osascript -e 'tell app "Finder" to set frontmost of process "Python" to true' ''') # Window comes to the front    start = Start()    root.mainloop()    print "Search Query Entered"        try:        movie_info = run_browser(start.query, start.rating)    except AttributeError:        break        print "Information Retreived"    root = Tk()    os.system('''/usr/bin/osascript -e 'tell app "Finder" to set frontmost of process "Python" to true' ''')    confirm_alert = Confirm_Info(movie_info)    root.mainloop()        if confirm_alert.reply:        duplicate = Excel_Write(movie_info)        if duplicate == True:            root = Tk()            os.system('''/usr/bin/osascript -e 'tell app "Finder" to set frontmost of process "Python" to true' ''')            duplicate_alert = Duplicate_Entry()            root.mainloop()        else:            print "Written to Excel"            root = Tk()            os.system('''/usr/bin/osascript -e 'tell app "Finder" to set frontmost of process "Python" to true' ''')             complete_alert = Complete()            root.mainloop()            if not complete_alert.another:                break    elif not confirm_alert.reply:        break